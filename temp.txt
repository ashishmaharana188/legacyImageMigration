async executeSql(): Promise<{ result: string; logs: SqlLog[] }> {
  const logs: SqlLog[] = [];
  let client: PoolClient | null = null;
  
  try {
    const { transactions, logs: generateLogs } = await this.generateSql();
    logs.push(...generateLogs);
    
    if (!transactions.length) {
      logs.push({
        row: 0,
        status: "error",
        message: "No transactions to execute",
      });
      return { result: "failed", logs };
    }
    
    client = await this.pool.connect();
    this.logger.info("Connected to database");
    await client.query("BEGIN");
    
    // Check if transaction_reference_id already exists in database
    const checkExistingQuery = `
      SELECT transaction_reference_id 
      FROM investor.aif_document_details 
      WHERE transaction_reference_id = $1 
      LIMIT 1
    `;
    
    // Insert query
    const insertQuery = `
      INSERT INTO investor.aif_document_details(
        document_process, document_activity, document_type, document_format, document_path,
        folio_id, transaction_reference_id, document_status, mime_type,
        user_attr0, user_attr1, user_attr2, user_attr3, user_attr4,
        user_attr5, user_attr6, user_attr7, user_attr8, user_attr9,
        approval_status, approved_by, approved_on, comments, audit_code,
        del_flag, last_update_tms, last_updated_by, creation_date, created_by,
        page_count, client_id
      ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31)
    `;
    
    for (const [index, data] of transactions.entries()) {
      const ext = this.getFileExtension(data.id_path);
      if (!ext) {
        logs.push({
          row: index + 2,
          status: "error",
          message: "Invalid file extension",
        });
        continue;
      }
      
      const format = ext.toUpperCase();
      const clientId = String(data.id_fund)
        .split("")
        .map((char) => (/\d/.test(char) ? char.charCodeAt(0) : ""))
        .join("");
      
      const basePath = `aif-in-a-box-assets-prod: Data/APPLICATION_FORMS/CLIENT_CODE_${data.id_fund}/`;
      const docPath = `${basePath}CLIENT_CODE_${data.id_fund}_TRANSACTION_NUMBER_${data.id_ihno}/CLIENT_CODE_${data.id_fund}_TRANSACTION_NUMBER_${data.id_ihno}.${ext}`;
      
      const folioId = data.id_fund; 
      const incomingTransactionId = data.id_ihno.toString(); // ← Clearer naming
      
      try {
        // Check if this id_ihno already exists as transaction_reference_id
        const existingResult = await client.query(checkExistingQuery, [incomingTransactionId]);
        
        if (existingResult.rows.length > 0) {
          // This id_ihno already exists in transaction_reference_id column - skip
          logs.push({
            row: index + 2,
            status: "skipped",
            message: `Row ${index + 2} skipped - id_ihno ${incomingTransactionId} already exists in transaction_reference_id`,
          });
          continue;
        }
        
        // This id_ihno doesn't exist in database - proceed with insertion
        const values = [
          this.trxnMap[data.id_trtype] || "Unknown",
          "Image Upload",
          trxnNameMap[data.id_trtype] || "Unknown",
          format,
          docPath,
          folioId, // folio_id
          incomingTransactionId, // transaction_reference_id ← stores data.id_ihno
          "A",
          mimeType[ext] || "application/octet-stream",
          null, // user_attr0
          incomingTransactionId, // user_attr1 
          data.id_acno, // user_attr2
          null, // user_attr3
          null, // user_attr4
          folioId, // user_attr5 
          null, // user_attr6
          null, // user_attr7
          null, // user_attr8
          null, // user_attr9
          null,
          null,
          null,
          null,
          null,
          false,
          new Date(),
          "system",
          new Date(),
          "system",
          data.page_count,
          clientId,
        ];
        
        await client.query(insertQuery, values);
        
        logs.push({
          row: index + 2,
          status: "executed",
          message: `Row ${index + 2} inserted successfully (id_ihno: ${incomingTransactionId} → transaction_reference_id, folio: ${folioId})`,
        });
        
      } catch (rowError) {
        logs.push({
          row: index + 2,
          status: "error",
          message: `Row ${index + 2} failed: ${rowError instanceof Error ? rowError.message : "Unknown error"}`,
        });
        continue;
      }
    }
    
    await client.query("COMMIT");
    this.logger.info("SQL executed successfully");
    return { result: "success", logs };
    
  } catch (err) {
    if (client) {
      await client.query("ROLLBACK");
      this.logger.info("Transaction rolled back");
    }
    logs.push({
      row: 0,
      status: "error",
      message: `SQL execution failed: ${
        err instanceof Error ? err.message : "Unknown error"
      }`,
    });
    return { result: "failed", logs };
    
  } finally {
    if (client) {
      client.release();
      this.logger.info("Database connection released");
    }
  }
}
